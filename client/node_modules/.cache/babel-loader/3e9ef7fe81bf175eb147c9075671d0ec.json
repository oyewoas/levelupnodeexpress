{"ast":null,"code":"import _objectSpread from \"/home/oyewoas/Documents/Software Dev Learning/With Companies/LevelUp Academy/Software Dev Projects/github/levelup-timeoffapp/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/oyewoas/Documents/Software Dev Learning/With Companies/LevelUp Academy/Software Dev Projects/github/levelup-timeoffapp/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/oyewoas/Documents/Software Dev Learning/With Companies/LevelUp Academy/Software Dev Projects/github/levelup-timeoffapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/oyewoas/Documents/Software Dev Learning/With Companies/LevelUp Academy/Software Dev Projects/github/levelup-timeoffapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport validator from 'validator';\nimport moment from 'moment';\n\nvar FormValidator =\n/*#__PURE__*/\nfunction () {\n  function FormValidator(validations) {\n    _classCallCheck(this, FormValidator);\n\n    // validations is an array of validation rules specific to a form\n    this.validations = validations;\n  }\n\n  _createClass(FormValidator, [{\n    key: \"validate\",\n    value: function validate(state) {\n      // start out assuming valid\n      var validation = this.valid(); // for each validation rule\n\n      this.validations.forEach(function (rule) {\n        // if the field hasn't already been marked invalid by an earlier rule\n        if (!validation[rule.field].isInvalid) {\n          // determine the field value, the method to invoke and optional args from \n          // the rule definition\n          var field_value = state[rule.field].toString();\n          var args = rule.args || [];\n          var validation_method = typeof rule.method === 'string' ? validator[rule.method] : rule.method; // call the validation_method with the current field value as the first\n          // argument, any additional arguments, and the whole state as a final\n          // argument.  If the result doesn't match the rule.validWhen property,\n          // then modify the validation object for the field and set the isValid\n          // field to false\n\n          if (validation_method.apply(void 0, [field_value].concat(_toConsumableArray(args), [state])) !== rule.validWhen) {\n            validation[rule.field] = {\n              isInvalid: true,\n              message: rule.message\n            };\n            validation.isValid = false;\n          }\n        }\n      });\n      return validation;\n    }\n  }, {\n    key: \"valid\",\n    value: function valid() {\n      var validation = {};\n      this.validations.map(function (rule) {\n        return validation[rule.field] = {\n          isInvalid: false,\n          message: ''\n        };\n      });\n      return _objectSpread({\n        isValid: true\n      }, validation);\n    }\n  }]);\n\n  return FormValidator;\n}(); // using validator.js\n\n\n(function () {\n  // These are the constraints used to validate the form\n  var constraints = {\n    email: {\n      // Email is required\n      presence: true,\n      // and must be an email (duh)\n      email: true\n    },\n    password: {\n      // Password is also required\n      presence: true,\n      // And must be at least 5 characters long\n      length: {\n        minimum: 5\n      }\n    },\n    \"confirm-password\": {\n      // You need to confirm your password\n      presence: true,\n      // and it needs to be equal to the other password\n      equality: \"password\"\n    },\n    username: {\n      // You need to pick a username too\n      presence: true,\n      // And it must be between 3 and 20 characters long\n      length: {\n        minimum: 3,\n        maximum: 20\n      },\n      format: {\n        // We don't allow anything that a-z and 0-9\n        pattern: \"[a-z0-9]+\",\n        // but we don't care if the username is uppercase or lowercase\n        flags: \"i\",\n        message: \"can only contain a-z and 0-9\"\n      }\n    },\n    birthdate: {\n      // The user needs to give a birthday\n      presence: true,\n      // and must be born at least 18 years ago\n      date: {\n        latest: moment().subtract(18, \"years\"),\n        message: \"^You must be at least 18 years old to use this service\"\n      }\n    },\n    country: {\n      // You also need to input where you live\n      presence: true,\n      // And we restrict the countries supported to Sweden\n      inclusion: {\n        within: [\"SE\"],\n        // The ^ prevents the field name from being prepended to the error\n        message: \"^Sorry, this service is for Sweden only\"\n      }\n    },\n    zip: {\n      // Zip is optional but if specified it must be a 5 digit long number\n      format: {\n        pattern: \"\\\\d{5}\"\n      }\n    },\n    \"number-of-children\": {\n      // You don't have to input the number of children but it you do\n      // you need to input an integer > 0\n      numericality: {\n        onlyInteger: true,\n        greaterThanOrEqualTo: 0\n      }\n    }\n  }; // Hook up the form so we can prevent it from being posted\n\n  document.querySelector(\"form#form\").addEventListener(\"submit\", function (ev) {\n    ev.preventDefault();\n    handleFormSubmit(this);\n  });\n\n  function handleFormSubmit(form) {\n    // First we gather the values from the form\n    var values = validate.collectFormValues(form); // then we validate them against the constraints\n\n    var errors = validate(values, constraints); // then we update the form to reflect the results\n\n    showErrors(form, errors || {}); // And if all constraints pass we let the user know\n\n    if (!errors) {\n      showSuccess();\n    }\n  } // Updates the inputs with the validation errors\n\n\n  function showErrors(form, errors) {\n    // We loop through all the inputs and show the errors for that input\n    _.each(form.querySelectorAll(\"input[name], select[name]\"), function (input) {\n      // Since the errors can be null if no errors were found we need to handle\n      // that\n      showErrorsForInput(input, errors && errors[input.name]);\n    });\n  } // Shows the errors for a specific input\n\n\n  function showErrorsForInput(input, errors) {\n    // This is the root of the input\n    var formGroup = closestParent(input.parentNode, \"form-group\") // Find where the error messages will be insert into\n    ,\n        messages = formGroup.querySelector(\".messages\"); // First we remove any old messages and resets the classes\n\n    resetFormGroup(formGroup); // If we have errors\n\n    if (errors) {\n      // we first mark the group has having errors\n      formGroup.classList.add(\"has-error\"); // then we append all the errors\n\n      _.each(errors, function (error) {\n        addError(messages, error);\n      });\n    } else {\n      // otherwise we simply mark it as success\n      formGroup.classList.add(\"has-success\");\n    }\n  } // Recusively finds the closest parent that has the specified class\n\n\n  function closestParent(child, className) {\n    if (!child || child == document) {\n      return null;\n    }\n\n    if (child.classList.contains(className)) {\n      return child;\n    } else {\n      return closestParent(child.parentNode, className);\n    }\n  }\n\n  function resetFormGroup(formGroup) {\n    // Remove the success and error classes\n    formGroup.classList.remove(\"has-error\");\n    formGroup.classList.remove(\"has-success\"); // and remove any old messages\n\n    _.each(formGroup.querySelectorAll(\".help-block.error\"), function (el) {\n      el.parentNode.removeChild(el);\n    });\n  } // Adds the specified error with the following markup\n  // <p class=\"help-block error\">[message]</p>\n\n\n  function addError(messages, error) {\n    var block = document.createElement(\"p\");\n    block.classList.add(\"help-block\");\n    block.classList.add(\"error\");\n    block.innerHTML = error;\n    messages.appendChild(block);\n  }\n\n  function showSuccess() {\n    // We made it \\:D/\n    alert(\"Success!\");\n  }\n})();\n\nexport default FormValidator;","map":{"version":3,"sources":["/home/oyewoas/Documents/Software Dev Learning/With Companies/LevelUp Academy/Software Dev Projects/github/levelup-timeoffapp/src/components/FormValidator/FormValidator.js"],"names":["validator","moment","FormValidator","validations","state","validation","valid","forEach","rule","field","isInvalid","field_value","toString","args","validation_method","method","validWhen","message","isValid","map","constraints","email","presence","password","length","minimum","equality","username","maximum","format","pattern","flags","birthdate","date","latest","subtract","country","inclusion","within","zip","numericality","onlyInteger","greaterThanOrEqualTo","document","querySelector","addEventListener","ev","preventDefault","handleFormSubmit","form","values","validate","collectFormValues","errors","showErrors","showSuccess","_","each","querySelectorAll","input","showErrorsForInput","name","formGroup","closestParent","parentNode","messages","resetFormGroup","classList","add","error","addError","child","className","contains","remove","el","removeChild","block","createElement","innerHTML","appendChild","alert"],"mappings":"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","sourcesContent":["import validator from 'validator';\nimport moment from 'moment'\n\nclass FormValidator {\n  constructor(validations) {\n    // validations is an array of validation rules specific to a form\n    this.validations = validations;\n  }\n\n  validate(state) {\n    // start out assuming valid\n    let validation = this.valid();\n\n    // for each validation rule\n    this.validations.forEach(rule => {\n\n      // if the field hasn't already been marked invalid by an earlier rule\n      if (!validation[rule.field].isInvalid) {\n        // determine the field value, the method to invoke and optional args from \n        // the rule definition\n        const field_value = state[rule.field].toString();\n        const args = rule.args || [];\n        const validation_method = \n              typeof rule.method === 'string' ?\n              validator[rule.method] : \n              rule.method\n              \n        // call the validation_method with the current field value as the first\n        // argument, any additional arguments, and the whole state as a final\n        // argument.  If the result doesn't match the rule.validWhen property,\n        // then modify the validation object for the field and set the isValid\n        // field to false\n        if(validation_method(field_value, ...args, state) !== rule.validWhen) {\n          validation[rule.field] = { isInvalid: true, message: rule.message }\n          validation.isValid = false;\n        }\n      }\n    });\n\n    return validation;\n  }\n\n  valid() {\n    const validation = {}\n\n    this.validations.map(rule => (\n      validation[rule.field] = { isInvalid: false, message: '' }\n    ));\n\n    return { isValid: true, ...validation };\n  }\n}\n\n\n\n\n// using validator.js\n(function() {\n  // These are the constraints used to validate the form\n  var constraints = {\n    email: {\n      // Email is required\n      presence: true,\n      // and must be an email (duh)\n      email: true\n    },\n    password: {\n      // Password is also required\n      presence: true,\n      // And must be at least 5 characters long\n      length: {\n        minimum: 5\n      }\n    },\n    \"confirm-password\": {\n      // You need to confirm your password\n      presence: true,\n      // and it needs to be equal to the other password\n      equality: \"password\"\n    },\n    username: {\n      // You need to pick a username too\n      presence: true,\n      // And it must be between 3 and 20 characters long\n      length: {\n        minimum: 3,\n        maximum: 20\n      },\n      format: {\n        // We don't allow anything that a-z and 0-9\n        pattern: \"[a-z0-9]+\",\n        // but we don't care if the username is uppercase or lowercase\n        flags: \"i\",\n        message: \"can only contain a-z and 0-9\"\n      }\n    },\n    birthdate: {\n      // The user needs to give a birthday\n      presence: true,\n      // and must be born at least 18 years ago\n      date: {\n        latest: moment().subtract(18, \"years\"),\n        message: \"^You must be at least 18 years old to use this service\"\n      }\n    },\n    country: {\n      // You also need to input where you live\n      presence: true,\n      // And we restrict the countries supported to Sweden\n      inclusion: {\n        within: [\"SE\"],\n        // The ^ prevents the field name from being prepended to the error\n        message: \"^Sorry, this service is for Sweden only\"\n      }\n    },\n    zip: {\n      // Zip is optional but if specified it must be a 5 digit long number\n      format: {\n        pattern: \"\\\\d{5}\"\n      }\n    },\n    \"number-of-children\": {\n      // You don't have to input the number of children but it you do\n      // you need to input an integer > 0\n      numericality: {\n        onlyInteger: true,\n        greaterThanOrEqualTo: 0\n      }\n    }\n  };\n\n  // Hook up the form so we can prevent it from being posted\n  document.querySelector(\"form#form\")\n    .addEventListener(\"submit\", function(ev) {\n      ev.preventDefault();\n      handleFormSubmit(this);\n    });\n\n  function handleFormSubmit(form) {\n    // First we gather the values from the form\n    var values = validate.collectFormValues(form);\n    // then we validate them against the constraints\n    var errors = validate(values, constraints);\n    // then we update the form to reflect the results\n    showErrors(form, errors || {});\n    // And if all constraints pass we let the user know\n    if (!errors) {\n      showSuccess();\n    }\n  }\n\n  // Updates the inputs with the validation errors\n  function showErrors(form, errors) {\n    // We loop through all the inputs and show the errors for that input\n    _.each(form.querySelectorAll(\"input[name], select[name]\"), function(input) {\n      // Since the errors can be null if no errors were found we need to handle\n      // that\n      showErrorsForInput(input, errors && errors[input.name]);\n    });\n  }\n\n  // Shows the errors for a specific input\n  function showErrorsForInput(input, errors) {\n    // This is the root of the input\n    var formGroup = closestParent(input.parentNode, \"form-group\")\n      // Find where the error messages will be insert into\n      , messages = formGroup.querySelector(\".messages\");\n    // First we remove any old messages and resets the classes\n    resetFormGroup(formGroup);\n    // If we have errors\n    if (errors) {\n      // we first mark the group has having errors\n      formGroup.classList.add(\"has-error\");\n      // then we append all the errors\n      _.each(errors, function(error) {\n        addError(messages, error);\n      });\n    } else {\n      // otherwise we simply mark it as success\n      formGroup.classList.add(\"has-success\");\n    }\n  }\n\n  // Recusively finds the closest parent that has the specified class\n  function closestParent(child, className) {\n    if (!child || child == document) {\n      return null;\n    }\n    if (child.classList.contains(className)) {\n      return child;\n    } else {\n      return closestParent(child.parentNode, className);\n    }\n  }\n\n  function resetFormGroup(formGroup) {\n    // Remove the success and error classes\n    formGroup.classList.remove(\"has-error\");\n    formGroup.classList.remove(\"has-success\");\n    // and remove any old messages\n    _.each(formGroup.querySelectorAll(\".help-block.error\"), function(el) {\n      el.parentNode.removeChild(el);\n    });\n  }\n\n  // Adds the specified error with the following markup\n  // <p class=\"help-block error\">[message]</p>\n  function addError(messages, error) {\n    var block = document.createElement(\"p\");\n    block.classList.add(\"help-block\");\n    block.classList.add(\"error\");\n    block.innerHTML = error;\n    messages.appendChild(block);\n  }\n\n  function showSuccess() {\n    // We made it \\:D/\n    alert(\"Success!\");\n  }\n})();\nexport default FormValidator;"]},"metadata":{},"sourceType":"module"}