{"ast":null,"code":"import _defineProperty from \"/home/oyewoas/Documents/Software Dev Learning/With Companies/LevelUp Academy/Software Dev Projects/github/levelup-timeoffapp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/oyewoas/Documents/Software Dev Learning/With Companies/LevelUp Academy/Software Dev Projects/github/levelup-timeoffapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/oyewoas/Documents/Software Dev Learning/With Companies/LevelUp Academy/Software Dev Projects/github/levelup-timeoffapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/oyewoas/Documents/Software Dev Learning/With Companies/LevelUp Academy/Software Dev Projects/github/levelup-timeoffapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/oyewoas/Documents/Software Dev Learning/With Companies/LevelUp Academy/Software Dev Projects/github/levelup-timeoffapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/oyewoas/Documents/Software Dev Learning/With Companies/LevelUp Academy/Software Dev Projects/github/levelup-timeoffapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/oyewoas/Documents/Software Dev Learning/With Companies/LevelUp Academy/Software Dev Projects/github/levelup-timeoffapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/oyewoas/Documents/Software Dev Learning/With Companies/LevelUp Academy/Software Dev Projects/github/levelup-timeoffapp/src/components/LogInPage/LogInPage.js\";\nimport React, { Component } from 'react';\nimport Footer from '../Footer/Footer';\nimport { Link } from 'react-router-dom';\nimport adduser from \"../../assets/img/undraw_add_user_ipe3.svg\";\nimport FormValidator from '../FormValidator/FormValidator';\nimport LogInNavBar from '../LogInNavBar/LogInNavBar';\nimport './LogInPage.css';\n\nvar LogInPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LogInPage, _Component);\n\n  function LogInPage(props) {\n    var _this;\n\n    _classCallCheck(this, LogInPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LogInPage).call(this, props));\n\n    _this.passwordMatch = function (confirmation, state) {\n      return state.password === confirmation;\n    };\n\n    _this.handleInputChange = function (event) {\n      event.preventDefault();\n\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.handleFormSubmit = function (event) {\n      event.preventDefault();\n\n      var validation = _this.validator.validate(_this.state);\n\n      _this.setState({\n        validation: validation\n      });\n\n      _this.submitted = true;\n\n      if (validation.isValid) {\n        // handle actual form submission here\n        alert('Form submitted successfully');\n      }\n    };\n\n    _this.handleInputChange = _this.handleInputChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleFormSubmit = _this.handleFormSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validator = new FormValidator([{\n      field: 'company',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Company Name is required'\n    }, {\n      field: 'firstname',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'First Name is required'\n    }, {\n      field: 'firstname',\n      method: 'matches',\n      args: [/^[a-zA-Z]*$/],\n      validWhen: true,\n      message: 'First Name can only contain letters'\n    }, {\n      field: 'lastname',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Last Name is required'\n    }, {\n      field: 'lastname',\n      method: 'matches',\n      args: [/^[a-zA-Z]*$/],\n      validWhen: true,\n      message: 'Last Name can only contain letters'\n    }, {\n      field: 'email',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Email is required'\n    }, {\n      field: 'email',\n      method: 'isEmail',\n      validWhen: true,\n      message: 'That is not a valid email.'\n    }, {\n      field: 'phone',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Pleave provide a phone number.'\n    }, {\n      field: 'phone',\n      method: 'matches',\n      args: [/^\\(?\\d\\d\\d\\)? ?\\d\\d\\d-?\\d\\d\\d\\d$/],\n      // args is an optional array of arguements that will be passed to the validation method\n      validWhen: true,\n      message: 'That is not a valid phone number.'\n    }, {\n      field: 'password',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Password is required'\n    }, {\n      field: 'confirmpassword',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Password confirmation is required'\n    }, {\n      field: 'confirmpassword',\n      method: _this.passwordMatch,\n      // notice that we are passing a custom function here\n      validWhen: true,\n      message: 'Password and password confirmation do not match.'\n    }, {\n      field: 'age',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Age is required'\n    }, {\n      field: 'age',\n      method: 'isInt',\n      args: [{\n        min: 16,\n        max: 70\n      }],\n      // an array of additional arguments\n      validWhen: true,\n      message: 'Your age must be an integer between 16 and 70'\n    }, {\n      field: 'department',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Work Department is required'\n    }, {\n      field: 'department',\n      method: 'matches',\n      args: [/^[a-zA-Z]*$/],\n      validWhen: true,\n      message: 'Department details can only contain letters'\n    }, {\n      field: 'manager',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Manager details is required'\n    }, {\n      field: 'manager',\n      method: 'matches',\n      args: [/^[a-zA-Z]*$/],\n      validWhen: true,\n      message: 'Manager details can only contain letters'\n    }, {\n      field: 'dob',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Date of Birth is required'\n    }, {\n      field: 'country',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Country is required'\n    }, {\n      field: 'timezone',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Time Zone is required'\n    }]);\n    _this.state = {\n      company: '',\n      email: '',\n      firstname: '',\n      lastname: '',\n      phone: '',\n      password: '',\n      confirmpassword: '',\n      age: '',\n      dob: '',\n      country: '',\n      timezone: '',\n      manager: '',\n      department: '',\n      validation: _this.validator.valid()\n    };\n    _this.submitted = false;\n    return _this;\n  }\n\n  _createClass(LogInPage, [{\n    key: \"render\",\n    value: function render() {\n      var validation = this.submitted ? // if the form has been submitted at least once\n      this.validator.validate(this.state) : // then check validity every time we render\n      this.state.validation;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(LogInNavBar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container-fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-sm-3 \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"col-sm-6 form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        action: \"\",\n        method: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"form-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"Log In\")), React.createElement(\"div\", {\n        className: \"form-group {validation.company.isInvalid && 'has-error'}\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"company\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"Company Name\"), React.createElement(\"input\", {\n        onChange: this.handleInputChange,\n        type: \"text\",\n        className: \"form-control\",\n        name: \"company\",\n        id: \"company\",\n        placeholder: \"Enter Company Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"help-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, validation.company.message)), React.createElement(\"div\", {\n        className: \"form-group {validation.firstname.isInvalid && 'has-error'}\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"firstname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, \"First Name\"), React.createElement(\"input\", {\n        onChange: this.handleInputChange,\n        type: \"text\",\n        name: \"firstname\",\n        className: \"form-control\",\n        id: \"firstname\",\n        placeholder: \"First Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"help-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, validation.firstname.message)), React.createElement(\"div\", {\n        className: \"form-group {validation.lastname.isInvalid && 'has-error'}\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"lastname \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, \"Last Name\"), React.createElement(\"input\", {\n        onChange: this.handleInputChange,\n        type: \"text\",\n        name: \"lastname\",\n        className: \"form-control\",\n        id: \"lastname\",\n        placeholder: \"Last Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"help-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, validation.lastname.message)), React.createElement(\"div\", {\n        className: \"form-group {validation.lastname.isInvalid && 'has-error'}\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"Email address\"), React.createElement(\"input\", {\n        onChange: this.handleInputChange,\n        type: \"email\",\n        name: \"email\",\n        className: \"form-control\",\n        id: \"email\",\n        placeholder: \"Enter email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"help-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, validation.email.message)))))));\n    }\n  }]);\n\n  return LogInPage;\n}(Component);\n\nexport default LogInPage;","map":{"version":3,"sources":["/home/oyewoas/Documents/Software Dev Learning/With Companies/LevelUp Academy/Software Dev Projects/github/levelup-timeoffapp/src/components/LogInPage/LogInPage.js"],"names":["React","Component","Footer","Link","FormValidator","LogInNavBar","LogInPage","props","passwordMatch","confirmation","state","password","handleInputChange","event","preventDefault","setState","target","name","value","handleFormSubmit","validation","validator","validate","submitted","isValid","alert","bind","field","method","validWhen","message","args","min","max","company","email","firstname","lastname","phone","confirmpassword","age","dob","country","timezone","manager","department","valid"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Footer from '../Footer/Footer'\nimport {Link} from 'react-router-dom'\nimport adduser from '../../assets/img/undraw_add_user_ipe3.svg'\nimport FormValidator from '../FormValidator/FormValidator'\nimport LogInNavBar from '../LogInNavBar/LogInNavBar'\nimport './LogInPage.css'\n\nclass LogInPage extends Component {\n    constructor(props){\n        super(props);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.validator = new FormValidator([\n    { \n        field: 'company', \n        method: 'isEmpty', \n        validWhen: false, \n        message: 'Company Name is required' \n      },\n      { \n        field: 'firstname', \n        method: 'isEmpty',\n        validWhen: false, \n        message: 'First Name is required' \n                    },\n                    { \n        field: 'firstname', \n                        method: 'matches',\n                        args: [/^[a-zA-Z]*$/],\n        validWhen: true, \n        message: 'First Name can only contain letters' \n      },\n      { \n        field: 'lastname', \n        method: 'isEmpty',\n        validWhen: false, \n        message: 'Last Name is required' \n                    },\n                    { \n        field: 'lastname', \n        method: 'matches',\n                        args: [/^[a-zA-Z]*$/],\n        validWhen: true, \n        message: 'Last Name can only contain letters' \n      },\n    { \n      field: 'email', \n      method: 'isEmpty', \n      validWhen: false, \n      message: 'Email is required' \n    },\n    { \n      field: 'email',\n      method: 'isEmail', \n      validWhen: true, \n      message: 'That is not a valid email.'\n    },\n    { \n      field: 'phone', \n      method: 'isEmpty', \n      validWhen: false, \n      message: 'Pleave provide a phone number.'\n    },\n    {\n      field: 'phone', \n      method: 'matches',\n      args: [/^\\(?\\d\\d\\d\\)? ?\\d\\d\\d-?\\d\\d\\d\\d$/], // args is an optional array of arguements that will be passed to the validation method\n      validWhen: true, \n      message: 'That is not a valid phone number.'\n    },\n    { \n      field: 'password', \n      method: 'isEmpty', \n      validWhen: false, \n      message: 'Password is required'\n    },\n    { \n      field: 'confirmpassword', \n      method: 'isEmpty', \n      validWhen: false, \n      message: 'Password confirmation is required'\n    },\n    { \n      field: 'confirmpassword', \n      method: this.passwordMatch,   // notice that we are passing a custom function here\n      validWhen: true, \n      message: 'Password and password confirmation do not match.'\n    },\n    { \n        field: 'age', \n        method: 'isEmpty', \n        validWhen: false, \n        message: 'Age is required'\n                },\n                {\n                    field: 'age',\n                method: 'isInt',\n                args: [{min: 16, max: 70}],  // an array of additional arguments\n                validWhen: true,\n                message: 'Your age must be an integer between 16 and 70'\n                },\n                { \n                    field: 'department', \n                    method: 'isEmpty', \n                    validWhen: false, \n                    message: 'Work Department is required'\n                },\n                { \n                    field: 'department', \n                    method: 'matches',\n                    args: [/^[a-zA-Z]*$/],\n                    validWhen: true, \n                    message: 'Department details can only contain letters' \n                },\n                { \n                    field: 'manager', \n                    method: 'isEmpty', \n                    validWhen: false, \n                    message: 'Manager details is required'\n                },\n                { \n                    field: 'manager', \n                    method: 'matches',\n                    args: [/^[a-zA-Z]*$/],\n                    validWhen: true, \n                    message: 'Manager details can only contain letters' \n                },\n                { \n                    field: 'dob', \n                    method: 'isEmpty', \n                    validWhen: false, \n                    message: 'Date of Birth is required'\n                },\n                { \n                    field: 'country', \n                    method: 'isEmpty', \n                    validWhen: false, \n                    message: 'Country is required'\n                },\n                { \n                    field: 'timezone', \n                    method: 'isEmpty', \n                    validWhen: false, \n                    message: 'Time Zone is required'\n                } \n  ]);\n  \n  this.state = {\n    company:'',\n    email: '',\n    firstname: '',\n    lastname: '',\n    phone: '',\n    password: '',\n    confirmpassword: '',\n                age: '',\n                dob: '',\n                country:'',\n                timezone:'',\n    manager: '',\n    department: '',\n    validation: this.validator.valid(),\n  }\n\n  this.submitted = false;\n\n\n\n}\n\npasswordMatch = (confirmation, state) => (state.password === confirmation)\n\nhandleInputChange = event => {\n    event.preventDefault();\n\n    this.setState({\n        [event.target.name]: event.target.value,\n    });\n}\n\nhandleFormSubmit = event => {\nevent.preventDefault();\n\nconst validation = this.validator.validate(this.state);\nthis.setState({ validation });\nthis.submitted = true;\n\nif (validation.isValid) {\n            // handle actual form submission here\n            alert('Form submitted successfully')\n            \n}\n}\n\n    render(){\n        let validation = this.submitted ?                         // if the form has been submitted at least once\n        this.validator.validate(this.state) :   // then check validity every time we render\n        this.state.validation \n        return(\n            <div>\n                <LogInNavBar/>\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                    <div className=\"col-sm-3 \">\n                        {/* <img src={adduser} className=\"img-fluid\" alt=\"timeoffImg\"/> */}\n                    </div>\n                    <div className=\"col-sm-6 form\">\n                    <form action=\"\" method=\"\">\n                        <div className=\"text-center\">\n                            <h5 className=\"form-header\">Log In</h5>\n                        </div>\n                        <div className=\"form-group {validation.company.isInvalid && 'has-error'}\">\n                            <label htmlFor=\"company\">Company Name</label>\n                            <input onChange={this.handleInputChange} type=\"text\" className=\"form-control\" name=\"company\" id=\"company\" placeholder=\"Enter Company Name\" />\n                            <span className=\"help-block\">{validation.company.message}</span>\n                        </div>\n                        <div className=\"form-group {validation.firstname.isInvalid && 'has-error'}\">\n                            <label htmlFor=\"firstname\">First Name</label>\n                            <input onChange={this.handleInputChange} type=\"text\" name=\"firstname\" className=\"form-control\" id=\"firstname\" placeholder=\"First Name\" />\n                            <span className=\"help-block\">{validation.firstname.message}</span>\n                        \n                        </div>\n                        <div className=\"form-group {validation.lastname.isInvalid && 'has-error'}\">\n                            <label htmlFor=\"lastname \">Last Name</label>\n                            <input onChange={this.handleInputChange} type=\"text\" name=\"lastname\" className=\"form-control\" id=\"lastname\" placeholder=\"Last Name\" />\n                            <span className=\"help-block\">{validation.lastname.message}</span>\n                        \n                        </div>\n                        <div className=\"form-group {validation.lastname.isInvalid && 'has-error'}\">\n                            <label htmlFor=\"email\">Email address</label>\n                            <input onChange={this.handleInputChange} type=\"email\" name=\"email\" className=\"form-control\" id=\"email\" placeholder=\"Enter email\" />\n                            <span className=\"help-block\">{validation.email.message}</span>\n                        \n                        </div>\n                    </form>\n                    </div>\n                    </div>\n                    </div>\n                    </div>\n        )\n    }\n}\n\nexport default LogInPage;"]},"metadata":{},"sourceType":"module"}